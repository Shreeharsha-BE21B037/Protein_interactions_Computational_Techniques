# -*- coding: utf-8 -*-
"""QSAR Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TC2mes7YNezQ6GTbg2APjRjQEKqsgXaa
"""

import pandas as pd
import numpy as np
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from mpl_toolkits.mplot3d import Axes3D
import plotly.graph_objects as go
import warnings
warnings.filterwarnings("ignore")

# Training Data
df1 = pd.read_csv('/content/Amprenavir.csv')
df2 = pd.read_csv("/content/Indinavir.csv")
df3 = pd.read_csv("/content/Nelfinavir.csv")
df4 = pd.read_csv("/content/Ritonavir.csv")
df5 = pd.read_csv("/content/Saquinavir.csv")
df6 = pd.read_csv("/content/Atazanavir.csv")
df7 = pd.read_csv("/content/darunavir.csv")
df8 = pd.read_csv("/content/Lopinavir.csv")
df9 = pd.read_csv("/content/Tipranavir.csv")

# Test Data
df10 = pd.read_csv("/content/telinavir.csv")

# Create the Training Data
Train = pd.concat([df1,df2,df3,df4,df5,df6,df7,df8,df9], axis=0)
Train.reset_index(drop=True, inplace=True)
Train.insert(0, 'Drug', ['Amprenavir','Indinavir','Nelfinavir','Ritonavir','Saquinavir', 'Atazanavir', 'darunavir','Lopinavir','Tipranavir'])
Train['IC50'] =  [0.23, 34, 0.56, 12, 30, 4, 3.5,25,30]
print(Train)

Test = pd.concat([df10])
Test.reset_index(drop=True,inplace=True)
Test.insert(0,'Drug',['telinavir'])
Test['IC50'] = [6.3]
print(Test)

# Correlation between IC50 and every Discriptor
numerical_data = Train.drop(columns=['Drug'])
corr_matrix = numerical_data.corr()
ic50_sorted = corr_matrix['IC50'].sort_values(ascending=False)
ic50_clean = ic50_sorted.dropna()

# Sorted Corelation to observe the heighest
print('Sorted Corelation')
print(ic50_clean[1:])

# Cross corelation between every discriptors
cross_corr = []

for i in range(1,len(ic50_clean)):
    for j in range(i,len(ic50_clean)):
        # Each of their individual corelation with the activity should be > 0.7
        if abs(ic50_clean[i]) > 0.7 and abs(ic50_clean[j]) > 0.7:
            correlation = Train[ic50_clean.index[i]].corr(Train[ic50_clean.index[j]])
            cross_corr.append([i,j,correlation])

# Least cross correlation between the discriptors
min_index = min(range(len(cross_corr)), key=lambda i: abs(cross_corr[i][2]))
min_corr = cross_corr[min_index]

print('Final Choice')
print(f'Descriptor A : {ic50_clean.index[min_corr[0]]}, correlation with activity : {ic50_clean[min_corr[0]]}')
print(f'Descriptor B : {ic50_clean.index[min_corr[1]]}, correlation with activity : {ic50_clean[min_corr[1]]}')
print(f'The cross-correlation between the two descriptors being {min_corr[2]}')

# Interactive Plot
A = ic50_clean.index[min_corr[0]]
B = ic50_clean.index[min_corr[1]]

QSAR_Train = Train[['Drug',A,B,'IC50']]

# QSAR_Train.to_csv('QSAR_Train.csv')   # If needed to save

df_test = Test[['Drug',A,B,'IC50']]
X = QSAR_Train[[A,B]]
y = QSAR_Train['IC50']

# Create the linear regression model
model = LinearRegression()
model.fit(X, y)

X_test = df_test[[A,B]]
y_test = df_test['IC50']
y_test_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_test_pred)
print(f"Root Mean Squared Error on test data: {mse**0.5}")

# Generate predictions for plotting
A_range = np.linspace(X[A].min(), X[A].max(), 10)
B_range = np.linspace(X[B].min(), X[B].max(), 10)
A_grid, B_grid = np.meshgrid(A_range, B_range)
IC50_pred_grid = model.predict(np.c_[A_grid.ravel(), B_grid.ravel()]).reshape(A_grid.shape)

# Create the 3D interactive plot
fig = go.Figure()

# Plot training data points in green
fig.add_trace(go.Scatter3d(x=QSAR_Train[A], y=QSAR_Train[B], z=QSAR_Train['IC50'],mode='markers',marker=dict(size=5, color='green'),
    name='Training Data'))

# Plot test data points in red
fig.add_trace(go.Scatter3d(x=df_test[A], y=df_test[B], z=df_test['IC50'],mode='markers',marker=dict(size=5, color='red'),
    name='Test Data'))

# Plot regression plane
fig.add_trace(go.Surface(x=A_range, y=B_range, z=IC50_pred_grid,colorscale='Blues',opacity=0.7,name='Regression Plane'
))

# Set plot titles and labels
fig.update_layout(
    title="3D Interactive Linear Regression with Test Data",
    scene=dict(
        xaxis_title=A,
        yaxis_title=B,
        zaxis_title='IC50'
    )
)

# Show the plot
fig.show()

# Non-interactive Plot
A = ic50_clean.index[min_corr[0]]
B = ic50_clean.index[min_corr[1]]

QSAR_Train = Train[['Drug',A,B,'IC50']]
df_test = Test[['Drug',A,B,'IC50']]


X = QSAR_Train[[A,B]]
y = QSAR_Train['IC50']

X_test = df_test[[A, B]]
y_test_actual = df_test['IC50']


model = LinearRegression()
model.fit(X, y)

# Predict IC50 for the test data
y_test_pred = model.predict(X_test)
mse_test = mean_squared_error(y_test_actual, y_test_pred)
print(f"Root Mean Squared Error for test data: {mse_test**0.5}")

# Generate predictions for the training data for plotting
A_range = np.linspace(X[A].min(), X[A].max(), 10)
B_range = np.linspace(X[B].min(), X[B].max(), 10)
A_grid, B_grid = np.meshgrid(A_range, B_range)
IC50_pred_train = (model.coef_[0] * A_grid) + (model.coef_[1] * B_grid) + model.intercept_

# 3D Plotting
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')


ax.scatter(QSAR_Train[A], QSAR_Train[B], QSAR_Train['IC50'], color='green', label='Training Data')
ax.scatter(df_test[A], df_test[B], y_test_actual, color='red', label='Test Data')
ax.plot_surface(A_grid, B_grid, IC50_pred_train, color='blue', alpha=0.5, rstride=100, cstride=100)

# Set labels
ax.set_xlabel(A)
ax.set_ylabel(B)
ax.set_zlabel('IC50')
ax.set_title('3D Linear Regression with Test Data')
ax.grid(True)
ax.view_init(elev=20, azim=105)  # (0,0) for X axis and (0,90) for Y axis

plt.legend()
plt.show()